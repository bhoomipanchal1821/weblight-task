{"ast":null,"code":"var _jsxFileName = \"/var/www/html/REACT/weblight-task/src/components/DropDown.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react'\n// // export default function Posts() {\n// //   const [api, setapi] = useState([])\n// //   const API = 'https://api.github.com/repos/octocat/hello-world/stats/code_frequency';\n// //   const fetchPost = () => {\n// //     fetch(API)\n// //       .then((res) => res.json())\n// //       .then((res) => {\n// //         console.log(res)\n// //         setapi(res)\n// //       })\n// //   }\n// //   useEffect(() => {\n// //     fetchPost()\n// //   }, [])\n// //   return (\n// //     <>\n// //       <h2>React Fetch Data with REST API Example</h2>\n// //       <ul>\n// //         {api.map((item, i) => {\n// //           return <li key={i}>{item}</li>\n// //         })}\n// //       </ul>\n// //     </>\n// //   )\n// // }\n// // UserDropdown.js\n\n// // import React, { useEffect,useState } from 'react';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { fetchUsers } from './UserService';\n// // import { selectUser } from '../redux/userSlice';\n\n// // const UserDropdown = () => {\n// //   const dispatch = useDispatch();\n// //   const [employees, setEmployees] = useState([]);\n\n// //   useEffect(() => {\n// //     // Fetch users when the component mounts\n// //     fetchUsers();\n// //   }, []);\n\n// //   const handleUserChange = (event) => {\n// //     const selectedUserId = event.target.value;\n// //     const selectedUserData = employees.find((user) => user.id === selectedUserId);\n// //     dispatch(selectUser(selectedUserData));\n// //   };\n\n// //   return (\n// //     <div>\n// //       <label>Select User:</label>\n// //       <select onChange={handleUserChange} value={setEmployees?.id || ''}>\n// //         <option value=\"\" disabled>Select a user</option>\n// //         {employees?.map(user => {\n// //           return <option key={user.id} value={user.id}>\n// //             {user.name}\n// //           </option>\n// //         })}\n\n// //       </select>\n// //       {setEmployees && (\n// //         <div>\n// //           <h2>Selected User</h2>\n// //           <p>Name: {setEmployees.name}</p>\n// //           <p>Email: {setEmployees.email}</p>\n// //           {/* Add more user details as needed */}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default UserDropdown;\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n// import Select from 'react-select';\n// import { setSelectedOption } from './dropdownSlice';\n\n// const Chart = ({ chartRef, setChartInfo },{repoName, owner}) => {\n//       const [options] = useState({\n//         plotOptions: {\n//           series: {\n//             point: {\n\n//             }\n//           }\n//         },\n//         series: [\n//           {\n//             data: [2, 7, 5, 1, 4]\n//           },\n//           {\n//             data: [4, 3, 5, 6, 2, 3]\n//           }\n//         ]\n//       });\n\n//   const dispatch = useDispatch();\n//   const codeFrequency = useSelector((state) => state.codeFrequency);\n\n//   const [displayType, setDisplayType] = useState('both'); // Default display type is both\n\n//   useEffect(() => {\n//     const fetchCodeFrequency = async () => {\n//       const response = await fetch(`https://api.github.com/repos/octocat/hello-world/stats/code_frequency`);\n//       const data = await response.json();\n//       dispatch({ type: 'codeFrequency/fetchCodeFrequency', payload: data });\n//     };\n\n//     fetchCodeFrequency();\n//   }, [dispatch, repoName, owner]);\n\n//   const handleDisplayTypeChange = (event) => {\n//     setDisplayType(event.target.value);\n//   };\n\n//   const contributorsData = codeFrequency?.map((week) => ({\n//     timestamp: week[0],\n//     contributors: week.slice(1),\n//   }));\n\n//   const uniqueContributors = Array.from(new Set(contributorsData?.flatMap((data) => data.contributors.map((c) => c.author))));\n\n//   const chartOptions = {\n//     chart: {\n//       type: 'line',\n//     },\n//     title: {\n//       text: `Commit Activity for ${repoName}`,\n//     },\n//     xAxis: {\n//       categories: contributorsData?.map((data) => data.timestamp),\n//       title: {\n//         text: 'Timestamp',\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Total Changes',\n//       },\n//     },\n//     tooltip: {\n//       formatter: function () {\n//         const contributorData = this.points[0].point.contributorData[this.series.name];\n//         return `Timestamp: ${this.x}<br/>Changes: ${this.y}<br/>Contributor: ${contributorData.author}`;\n//       },\n//       shared: true,\n//     },\n//     plotOptions: {\n//       series: {\n//         marker: {\n//           enabled: false,\n//         },\n//       },\n//     },\n//     series: uniqueContributors?.map((contributor, index) => ({\n//       name: contributor,\n//       data: contributorsData.map((data) => {\n//         const contributorData = data.contributors.find((c) => c.author === contributor) || { total: 0 };\n//         return {\n//           y: displayType === 'additions' ? contributorData.total.additions : contributorData.total.deletions,\n//           contributorData,\n//         };\n//       }),\n//       visible: true, \n//     })),\n//   };\n\n//   return (\n//     <div>\n//       <h2>Commit Activity for {repoName}</h2>\n//       <label>\n//         Display Type:\n//         <select value={displayType} onChange={handleDisplayTypeChange}>\n//           <option value=\"additions\">Additions</option>\n//           <option value=\"deletions\">Deletions</option>\n//           <option value=\"both\">Both</option>\n//         </select>\n//       </label>\n\n//       <HighchartsReact ref={chartRef} highcharts={Highcharts} options={options} />\n//     </div>\n//   );\n// };\n\n// export default Chart;\n// Dropdown.js\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Select from 'react-select';\nimport { setSelectedOption } from '../redux/dropdownSlice';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dropdown = ({\n  options\n}, {\n  chartRef,\n  setChartInfo\n}) => {\n  _s();\n  const [] = useState({\n    plotOptions: {\n      series: {\n        point: {}\n      }\n    },\n    series: [{\n      data: [2, 7, 5, 1, 4]\n    }, {\n      data: [4, 3, 5, 6, 2, 3]\n    }]\n  });\n  const dispatch = useDispatch();\n  const handleOptionChange = selectedOption => {\n    dispatch(setSelectedOption(selectedOption));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      options: options,\n      onChange: handleOptionChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      ref: chartRef,\n      highcharts: Highcharts,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n_s(Dropdown, \"3huZB1hTB3sZ/hhH3BlA0ijNQys=\", false, function () {\n  return [useDispatch];\n});\n_c = Dropdown;\nexport default Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["React","useState","useDispatch","Select","setSelectedOption","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","Fragment","_Fragment","Dropdown","options","chartRef","setChartInfo","_s","plotOptions","series","point","data","dispatch","handleOptionChange","selectedOption","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","ref","highcharts","_c","$RefreshReg$"],"sources":["/var/www/html/REACT/weblight-task/src/components/DropDown.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react'\n// // export default function Posts() {\n// //   const [api, setapi] = useState([])\n// //   const API = 'https://api.github.com/repos/octocat/hello-world/stats/code_frequency';\n// //   const fetchPost = () => {\n// //     fetch(API)\n// //       .then((res) => res.json())\n// //       .then((res) => {\n// //         console.log(res)\n// //         setapi(res)\n// //       })\n// //   }\n// //   useEffect(() => {\n// //     fetchPost()\n// //   }, [])\n// //   return (\n// //     <>\n// //       <h2>React Fetch Data with REST API Example</h2>\n// //       <ul>\n// //         {api.map((item, i) => {\n// //           return <li key={i}>{item}</li>\n// //         })}\n// //       </ul>\n// //     </>\n// //   )\n// // }\n// // UserDropdown.js\n\n// // import React, { useEffect,useState } from 'react';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { fetchUsers } from './UserService';\n// // import { selectUser } from '../redux/userSlice';\n\n// // const UserDropdown = () => {\n// //   const dispatch = useDispatch();\n// //   const [employees, setEmployees] = useState([]);\n \n\n// //   useEffect(() => {\n// //     // Fetch users when the component mounts\n// //     fetchUsers();\n// //   }, []);\n\n// //   const handleUserChange = (event) => {\n// //     const selectedUserId = event.target.value;\n// //     const selectedUserData = employees.find((user) => user.id === selectedUserId);\n// //     dispatch(selectUser(selectedUserData));\n// //   };\n\n// //   return (\n// //     <div>\n// //       <label>Select User:</label>\n// //       <select onChange={handleUserChange} value={setEmployees?.id || ''}>\n// //         <option value=\"\" disabled>Select a user</option>\n// //         {employees?.map(user => {\n// //           return <option key={user.id} value={user.id}>\n// //             {user.name}\n// //           </option>\n// //         })}\n        \n// //       </select>\n// //       {setEmployees && (\n// //         <div>\n// //           <h2>Selected User</h2>\n// //           <p>Name: {setEmployees.name}</p>\n// //           <p>Email: {setEmployees.email}</p>\n// //           {/* Add more user details as needed */}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default UserDropdown;\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n// import Select from 'react-select';\n// import { setSelectedOption } from './dropdownSlice';\n\n\n// const Chart = ({ chartRef, setChartInfo },{repoName, owner}) => {\n//       const [options] = useState({\n//         plotOptions: {\n//           series: {\n//             point: {\n              \n//             }\n//           }\n//         },\n//         series: [\n//           {\n//             data: [2, 7, 5, 1, 4]\n//           },\n//           {\n//             data: [4, 3, 5, 6, 2, 3]\n//           }\n//         ]\n//       });\n    \n//   const dispatch = useDispatch();\n//   const codeFrequency = useSelector((state) => state.codeFrequency);\n\n//   const [displayType, setDisplayType] = useState('both'); // Default display type is both\n\n//   useEffect(() => {\n//     const fetchCodeFrequency = async () => {\n//       const response = await fetch(`https://api.github.com/repos/octocat/hello-world/stats/code_frequency`);\n//       const data = await response.json();\n//       dispatch({ type: 'codeFrequency/fetchCodeFrequency', payload: data });\n//     };\n\n//     fetchCodeFrequency();\n//   }, [dispatch, repoName, owner]);\n\n//   const handleDisplayTypeChange = (event) => {\n//     setDisplayType(event.target.value);\n//   };\n\n//   const contributorsData = codeFrequency?.map((week) => ({\n//     timestamp: week[0],\n//     contributors: week.slice(1),\n//   }));\n\n//   const uniqueContributors = Array.from(new Set(contributorsData?.flatMap((data) => data.contributors.map((c) => c.author))));\n\n//   const chartOptions = {\n//     chart: {\n//       type: 'line',\n//     },\n//     title: {\n//       text: `Commit Activity for ${repoName}`,\n//     },\n//     xAxis: {\n//       categories: contributorsData?.map((data) => data.timestamp),\n//       title: {\n//         text: 'Timestamp',\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Total Changes',\n//       },\n//     },\n//     tooltip: {\n//       formatter: function () {\n//         const contributorData = this.points[0].point.contributorData[this.series.name];\n//         return `Timestamp: ${this.x}<br/>Changes: ${this.y}<br/>Contributor: ${contributorData.author}`;\n//       },\n//       shared: true,\n//     },\n//     plotOptions: {\n//       series: {\n//         marker: {\n//           enabled: false,\n//         },\n//       },\n//     },\n//     series: uniqueContributors?.map((contributor, index) => ({\n//       name: contributor,\n//       data: contributorsData.map((data) => {\n//         const contributorData = data.contributors.find((c) => c.author === contributor) || { total: 0 };\n//         return {\n//           y: displayType === 'additions' ? contributorData.total.additions : contributorData.total.deletions,\n//           contributorData,\n//         };\n//       }),\n//       visible: true, \n//     })),\n//   };\n  \n//   return (\n//     <div>\n//       <h2>Commit Activity for {repoName}</h2>\n//       <label>\n//         Display Type:\n//         <select value={displayType} onChange={handleDisplayTypeChange}>\n//           <option value=\"additions\">Additions</option>\n//           <option value=\"deletions\">Deletions</option>\n//           <option value=\"both\">Both</option>\n//         </select>\n//       </label>\n\n//       <HighchartsReact ref={chartRef} highcharts={Highcharts} options={options} />\n//     </div>\n//   );\n// };\n\n// export default Chart;\n// Dropdown.js\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Select from 'react-select';\nimport { setSelectedOption } from '../redux/dropdownSlice';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nconst Dropdown = ({ options },{ chartRef, setChartInfo }) => {\n  const [] = useState({\n        plotOptions: {\n          series: {\n            point: {\n              \n            }\n          }\n        },\n        series: [\n          {\n            data: [2, 7, 5, 1, 4]\n          },\n          {\n            data: [4, 3, 5, 6, 2, 3]\n          }\n        ]\n      });\n  const dispatch = useDispatch();\n\n  const handleOptionChange = (selectedOption) => {\n    dispatch(setSelectedOption(selectedOption));\n  };\n\n  return (\n    <>\n    <Select\n      options={options}\n      onChange={handleOptionChange}\n    />\n    <HighchartsReact ref={chartRef} highcharts={Highcharts} options={options} />\n    </>\n  );\n};\n\nexport default Dropdown;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,MAAM,MAAM,cAAc;AACjC,SAASC,iBAAiB,QAAQ,wBAAwB;AAC1D,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,eAAe,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExD,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAQ,CAAC,EAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC3D,MAAM,EAAE,GAAGd,QAAQ,CAAC;IACde,WAAW,EAAE;MACXC,MAAM,EAAE;QACNC,KAAK,EAAE,CAEP;MACF;IACF,CAAC;IACDD,MAAM,EAAE,CACN;MACEE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACtB,CAAC,EACD;MACEA,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACzB,CAAC;EAEL,CAAC,CAAC;EACN,MAAMC,QAAQ,GAAGlB,WAAW,CAAC,CAAC;EAE9B,MAAMmB,kBAAkB,GAAIC,cAAc,IAAK;IAC7CF,QAAQ,CAAChB,iBAAiB,CAACkB,cAAc,CAAC,CAAC;EAC7C,CAAC;EAED,oBACEd,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACAf,OAAA,CAACL,MAAM;MACLS,OAAO,EAAEA,OAAQ;MACjBY,QAAQ,EAAEH;IAAmB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACFpB,OAAA,CAACF,eAAe;MAACuB,GAAG,EAAEhB,QAAS;MAACiB,UAAU,EAAEzB,UAAW;MAACO,OAAO,EAAEA;IAAQ;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAC1E,CAAC;AAEP,CAAC;AAACb,EAAA,CAjCIJ,QAAQ;EAAA,QAkBKT,WAAW;AAAA;AAAA6B,EAAA,GAlBxBpB,QAAQ;AAmCd,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}