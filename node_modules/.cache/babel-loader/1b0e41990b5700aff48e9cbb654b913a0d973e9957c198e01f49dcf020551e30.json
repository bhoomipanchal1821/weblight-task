{"ast":null,"code":"var _jsxFileName = \"/var/www/html/REACT/weblight-task/src/components/DropDownChart.js\",\n  _s = $RefreshSig$();\n// // DynamicHighchart.js\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n\n// import { setChartData } from '../redux/chartdataSlice';\n// import fetchChartData from '../redux/userSlice'\n// const DynamicHighchart = () => {\n//     // Sample chart data structure\n// const chartData = [\n//     { category: 'Week 1', value1: 10, value2: 20 },\n//     { category: 'Week 2', value1: 15, value2: 25 },\n//     // ... more data\n//   ];\n\n//   const dispatch = useDispatch();\n//   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n\n//   useEffect(() => {\n//     if (selectedOption) {\n//       fetchChartData(selectedOption.value)\n//         .then((data) => {\n//           dispatch(setChartData(data)); // Dispatch the actual action to update chart data\n//         })\n//         .catch((error) => {\n//           console.error('Error fetching chart data:', error);\n//         });\n//     }\n//   }, [dispatch, selectedOption]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: 'line', // Specify the chart type (line, column, bar, etc.)\n//     },\n//     title: {\n//       text: `Dynamic Highchart for ${selectedOption?.label || 'No Option Selected'}`,\n//     },\n//     xAxis: {\n//       categories: chartData.map((item) => item.category), // Replace with your actual data property\n//       title: {\n//         text: 'X-Axis Label',\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Y-Axis Label',\n//       },\n//     },\n//     series: [\n//       {\n//         name: 'Series 1',\n//         data: chartData.map((item) => item.value1), // Replace with your actual data property\n//       },\n//       {\n//         name: 'Series 2',\n//         data: chartData.map((item) => item.value2), // Replace with your actual data property\n//       },\n//     ],\n//     // Add more configuration options as needed\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n// };\n\n// export default DynamicHighchart;\n\n// MultilineChart.js\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultilineChart = () => {\n  _s();\n  const dispatch = useDispatch();\n  const chartData = useSelector(state => state.chartData.data);\n  useEffect(() => {\n    dispatch(fetchChartData());\n  }, [dispatch]);\n  const getSeries = () => {\n    return chartData.map(contributor => ({\n      name: contributor.name,\n      // Contributor name\n      data: contributor.weeklyChanges // Contributor's weekly changes data\n    }));\n  };\n  const chartOptions = {\n    chart: {\n      type: 'line'\n    },\n    title: {\n      text: 'Weekly Changes by Contributor'\n    },\n    xAxis: {\n      // Your X-axis configuration\n    },\n    yAxis: {\n      title: {\n        text: 'Total Changes'\n      }\n    },\n    tooltip: {\n      // Tooltip configuration\n      formatter: function () {\n        return `${this.series.name}<br/>Week: ${this.x}<br/>Changes: ${this.y}`;\n      }\n    },\n    legend: {\n      // Legend configuration\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'middle'\n    },\n    series: getSeries()\n  };\n  return /*#__PURE__*/_jsxDEV(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 10\n  }, this);\n};\n_s(MultilineChart, \"YzOXAM0DtQnrL3bW4GxwUvfrd1A=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = MultilineChart;\nexport default MultilineChart;\nvar _c;\n$RefreshReg$(_c, \"MultilineChart\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","MultilineChart","_s","dispatch","chartData","state","data","fetchChartData","getSeries","map","contributor","name","weeklyChanges","chartOptions","chart","type","title","text","xAxis","yAxis","tooltip","formatter","series","x","y","legend","layout","align","verticalAlign","highcharts","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/var/www/html/REACT/weblight-task/src/components/DropDownChart.js"],"sourcesContent":["\n// // DynamicHighchart.js\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n\n// import { setChartData } from '../redux/chartdataSlice';\n// import fetchChartData from '../redux/userSlice'\n// const DynamicHighchart = () => {\n//     // Sample chart data structure\n// const chartData = [\n//     { category: 'Week 1', value1: 10, value2: 20 },\n//     { category: 'Week 2', value1: 15, value2: 25 },\n//     // ... more data\n//   ];\n  \n//   const dispatch = useDispatch();\n//   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n \n\n//   useEffect(() => {\n//     if (selectedOption) {\n//       fetchChartData(selectedOption.value)\n//         .then((data) => {\n//           dispatch(setChartData(data)); // Dispatch the actual action to update chart data\n//         })\n//         .catch((error) => {\n//           console.error('Error fetching chart data:', error);\n//         });\n//     }\n//   }, [dispatch, selectedOption]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: 'line', // Specify the chart type (line, column, bar, etc.)\n//     },\n//     title: {\n//       text: `Dynamic Highchart for ${selectedOption?.label || 'No Option Selected'}`,\n//     },\n//     xAxis: {\n//       categories: chartData.map((item) => item.category), // Replace with your actual data property\n//       title: {\n//         text: 'X-Axis Label',\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Y-Axis Label',\n//       },\n//     },\n//     series: [\n//       {\n//         name: 'Series 1',\n//         data: chartData.map((item) => item.value1), // Replace with your actual data property\n//       },\n//       {\n//         name: 'Series 2',\n//         data: chartData.map((item) => item.value2), // Replace with your actual data property\n//       },\n//     ],\n//     // Add more configuration options as needed\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n// };\n\n// export default DynamicHighchart;\n\n\n// MultilineChart.js\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nconst MultilineChart = () => {\n  const dispatch = useDispatch();\n  const chartData = useSelector((state) => state.chartData.data);\n\n  useEffect(() => {\n    dispatch(fetchChartData());\n  }, [dispatch]);\n\n  const getSeries = () => {\n    return chartData.map((contributor) => ({\n      name: contributor.name, // Contributor name\n      data: contributor.weeklyChanges, // Contributor's weekly changes data\n    }));\n  };\n\n  const chartOptions = {\n    chart: {\n      type: 'line',\n    },\n    title: {\n      text: 'Weekly Changes by Contributor',\n    },\n    xAxis: {\n      // Your X-axis configuration\n    },\n    yAxis: {\n      title: {\n        text: 'Total Changes',\n      },\n    },\n    tooltip: {\n      // Tooltip configuration\n      formatter: function () {\n        return `${this.series.name}<br/>Week: ${this.x}<br/>Changes: ${this.y}`;\n      },\n    },\n    legend: {\n      // Legend configuration\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'middle',\n    },\n    series: getSeries(),\n  };\n\n  return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n};\n\nexport default MultilineChart;\n"],"mappings":";;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,eAAe,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,SAAS,GAAGR,WAAW,CAAES,KAAK,IAAKA,KAAK,CAACD,SAAS,CAACE,IAAI,CAAC;EAE9DZ,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACI,cAAc,CAAC,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,MAAMK,SAAS,GAAGA,CAAA,KAAM;IACtB,OAAOJ,SAAS,CAACK,GAAG,CAAEC,WAAW,KAAM;MACrCC,IAAI,EAAED,WAAW,CAACC,IAAI;MAAE;MACxBL,IAAI,EAAEI,WAAW,CAACE,aAAa,CAAE;IACnC,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMC,YAAY,GAAG;IACnBC,KAAK,EAAE;MACLC,IAAI,EAAE;IACR,CAAC;IACDC,KAAK,EAAE;MACLC,IAAI,EAAE;IACR,CAAC;IACDC,KAAK,EAAE;MACL;IAAA,CACD;IACDC,KAAK,EAAE;MACLH,KAAK,EAAE;QACLC,IAAI,EAAE;MACR;IACF,CAAC;IACDG,OAAO,EAAE;MACP;MACAC,SAAS,EAAE,SAAAA,CAAA,EAAY;QACrB,OAAQ,GAAE,IAAI,CAACC,MAAM,CAACX,IAAK,cAAa,IAAI,CAACY,CAAE,iBAAgB,IAAI,CAACC,CAAE,EAAC;MACzE;IACF,CAAC;IACDC,MAAM,EAAE;MACN;MACAC,MAAM,EAAE,UAAU;MAClBC,KAAK,EAAE,OAAO;MACdC,aAAa,EAAE;IACjB,CAAC;IACDN,MAAM,EAAEd,SAAS,CAAC;EACpB,CAAC;EAED,oBAAOR,OAAA,CAACF,eAAe;IAAC+B,UAAU,EAAEhC,UAAW;IAACiC,OAAO,EAAEjB;EAAa;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3E,CAAC;AAAChC,EAAA,CA9CID,cAAc;EAAA,QACDN,WAAW,EACVC,WAAW;AAAA;AAAAuC,EAAA,GAFzBlC,cAAc;AAgDpB,eAAeA,cAAc;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}