{"ast":null,"code":"var _jsxFileName = \"/var/www/html/REACT/weblight-task/src/components/DropDownChart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// DynamicHighchart.js\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n// import fetchChartData from'../redux/chartdataSlice'\n// import { setChartData } from '../redux/chartdataSlice';\n\n// const DynamicHighchart = () => {\n//     // Sample chart data structure\n// const chartData = [\n//     { category: 'Week<br/>Changes<br/>,Contributer', value1: 10, value2: 20 },\n//     { category: 'Week<br/>Changes<br/>,Contributer', value1: 20, value2: 30 },\n//     { category: 'Week<br/>Changes<br/>,Contributer', value1: 50, value2: 75 },\n//     // ... more data\n//   ];\n\n//   const dispatch = useDispatch();\n//   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n\n//   useEffect(() => {\n//     if (selectedOption) {\n//       fetchChartData(selectedOption.value)\n//         .then((data) => {\n//           dispatch(setChartData(data)); // Dispatch the actual action to update chart data\n//         })\n//         .catch((error) => {\n//           console.error('Error fetching chart data:', error);\n//         });\n//     }\n//   }, [dispatch, selectedOption]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: 'line', // Specify the chart type (line, column, bar, etc.)\n//     },\n//     title: {\n//       text: `Dynamic Highchart for ${selectedOption?.label || 'No Option Selected'}`,\n//     },\n//     xAxis: {\n//       categories: chartData.map((item) => item.category), // Replace with your actual data property\n//       title: {\n//         text: 'X-Axis Label',\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Y-Axis Label',\n//       },\n//     },\n//     series: [\n//       {\n//         name: 'Series 1',\n//         data: chartData.map((item) => item.value1), // Replace with your actual data property\n//       },\n//       {\n//         name: 'Series 2',\n//         data: chartData.map((item) => item.value2), // Replace with your actual data property\n//       },\n//     ],\n//     // Add more configuration options as needed\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n// };\n\n// export default DynamicHighchart;\n\nvar MyClass = React.createClass({\n  displayName: \"MyClass\",\n  render: function () {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"// A point click event that uses the Renderer to draw a label next to the point // On subsequent clicks, move the existing label instead of creating a new one. Highcharts.addEvent(Highcharts.Point, 'click', function () \", '{', \"if (this.series.options.className.indexOf('popup-on-click') !== -1) \", '{', \"const chart = this.series.chart; const date = Highcharts.dateFormat('%A, %b %e, %Y', this.x); const text = `\", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"$\", '{', \"date\", '}']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 45\n      }, this), \"$\", '{', \"this.y\", '}', \" $\", '{', \"this.series.name\", '}', \"`; const anchorX = this.plotX + this.series.xAxis.pos; const anchorY = this.plotY + this.series.yAxis.pos; const align = anchorX < chart.chartWidth - 200 ? 'left' : 'right'; const x = align === 'left' ? anchorX + 10 : anchorX - 10; const y = anchorY - 30; if (!chart.sticky) \", '{', \"chart.sticky = chart.renderer .label(text, x, y, 'callout',  anchorX, anchorY) .attr(\", '{', \"align, fill: 'rgba(0, 0, 0, 0.75)', padding: 10, zIndex: 7 // Above series, below tooltip\", '}', \") .css(\", '{', \"color: 'white'\", '}', \") .on('click', function () \", '{', \"chart.sticky = chart.sticky.destroy();\", '}', \") .add();\", '}', \" else \", '{', \"chart.sticky .attr(\", '{', \" align, text \", '}', \") .animate(\", '{', \" anchorX, anchorY, x, y \", '}', \", \", '{', \" duration: 250 \", '}', \");\", '}', '}', '}', \"); Highcharts.chart('container', \", '{', \"chart: \", '{', \"scrollablePlotArea: \", '{', \"minWidth: 700\", '}', '}', \", data: \", '{', \"csvURL: 'https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/analytics.csv', beforeParse: function (csv) \", '{', \"return csv.replace(/\\\\n\\\\n/g, '\\\\n');\", '}', '}', \", title: \", '{', \"text: 'Daily sessions at www.highcharts.com', align: 'left'\", '}', \", subtitle: \", '{', \"text: 'Source: Google Analytics', align: 'left'\", '}', \", xAxis: \", '{', \"tickInterval: 7 * 24 * 3600 * 1000, // one week tickWidth: 0, gridLineWidth: 1, labels: \", '{', \"align: 'left', x: 3, y: -3\", '}', '}', \", yAxis: [\", '{', \" // left y axis title: \", '{', \"text: null\", '}', \", labels: \", '{', \"align: 'left', x: 3, y: 16, format: '\", '{', \"value:.,0f\", '}', \"'\", '}', \", showFirstLabel: false\", '}', \", \", '{', \" // right y axis linkedTo: 0, gridLineWidth: 0, opposite: true, title: \", '{', \"text: null\", '}', \", labels: \", '{', \"align: 'right', x: -3, y: 16, format: '\", '{', \"value:.,0f\", '}', \"'\", '}', \", showFirstLabel: false\", '}', \"], legend: \", '{', \"align: 'left', verticalAlign: 'top', borderWidth: 0\", '}', \", tooltip: \", '{', \"shared: true, crosshairs: true\", '}', \", plotOptions: \", '{', \"series: \", '{', \"cursor: 'pointer', className: 'popup-on-click', marker: \", '{', \"lineWidth: 1\", '}', '}', '}', \", series: [\", '{', \"name: 'All sessions', lineWidth: 4, marker: \", '{', \"radius: 4\", '}', '}', \", \", '{', \"name: 'New users'\", '}', \"]\", '}', \");\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n});","map":{"version":3,"names":["MyClass","React","createClass","displayName","render","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/var/www/html/REACT/weblight-task/src/components/DropDownChart.js"],"sourcesContent":["\n// DynamicHighchart.js\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n// import fetchChartData from'../redux/chartdataSlice'\n// import { setChartData } from '../redux/chartdataSlice';\n\n// const DynamicHighchart = () => {\n//     // Sample chart data structure\n// const chartData = [\n//     { category: 'Week<br/>Changes<br/>,Contributer', value1: 10, value2: 20 },\n//     { category: 'Week<br/>Changes<br/>,Contributer', value1: 20, value2: 30 },\n//     { category: 'Week<br/>Changes<br/>,Contributer', value1: 50, value2: 75 },\n//     // ... more data\n//   ];\n  \n//   const dispatch = useDispatch();\n//   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n \n\n//   useEffect(() => {\n//     if (selectedOption) {\n//       fetchChartData(selectedOption.value)\n//         .then((data) => {\n//           dispatch(setChartData(data)); // Dispatch the actual action to update chart data\n//         })\n//         .catch((error) => {\n//           console.error('Error fetching chart data:', error);\n//         });\n//     }\n//   }, [dispatch, selectedOption]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: 'line', // Specify the chart type (line, column, bar, etc.)\n//     },\n//     title: {\n//       text: `Dynamic Highchart for ${selectedOption?.label || 'No Option Selected'}`,\n//     },\n//     xAxis: {\n//       categories: chartData.map((item) => item.category), // Replace with your actual data property\n//       title: {\n//         text: 'X-Axis Label',\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Y-Axis Label',\n//       },\n//     },\n//     series: [\n//       {\n//         name: 'Series 1',\n//         data: chartData.map((item) => item.value1), // Replace with your actual data property\n//       },\n//       {\n//         name: 'Series 2',\n//         data: chartData.map((item) => item.value2), // Replace with your actual data property\n//       },\n//     ],\n//     // Add more configuration options as needed\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n// };\n\n// export default DynamicHighchart;\n\n\nvar MyClass = React.createClass({\n  render: function() {\n    return (\n      <div>\n        // A point click event that uses the Renderer to draw a label next to the point\n        // On subsequent clicks, move the existing label instead of creating a new one.\n        Highcharts.addEvent(Highcharts.Point, 'click', function () {'{'}\n        if (this.series.options.className.indexOf('popup-on-click') !== -1) {'{'}\n        const chart = this.series.chart;\n        const date = Highcharts.dateFormat('%A, %b %e, %Y', this.x);\n        const text = `<b>${'{'}date{'}'}</b><br />${'{'}this.y{'}'} ${'{'}this.series.name{'}'}`;\n        const anchorX = this.plotX + this.series.xAxis.pos;\n        const anchorY = this.plotY + this.series.yAxis.pos;\n        const align = anchorX &lt; chart.chartWidth - 200 ? 'left' : 'right';\n        const x = align === 'left' ? anchorX + 10 : anchorX - 10;\n        const y = anchorY - 30;\n        if (!chart.sticky) {'{'}\n        chart.sticky = chart.renderer\n        .label(text, x, y, 'callout',  anchorX, anchorY)\n        .attr({'{'}\n        align,\n        fill: 'rgba(0, 0, 0, 0.75)',\n        padding: 10,\n        zIndex: 7 // Above series, below tooltip\n        {'}'})\n        .css({'{'}\n        color: 'white'\n        {'}'})\n        .on('click', function () {'{'}\n        chart.sticky = chart.sticky.destroy();\n        {'}'})\n        .add();\n        {'}'} else {'{'}\n        chart.sticky\n        .attr({'{'} align, text {'}'})\n        .animate({'{'} anchorX, anchorY, x, y {'}'}, {'{'} duration: 250 {'}'});\n        {'}'}\n        {'}'}\n        {'}'});\n        Highcharts.chart('container', {'{'}\n        chart: {'{'}\n        scrollablePlotArea: {'{'}\n        minWidth: 700\n        {'}'}\n        {'}'},\n        data: {'{'}\n        csvURL: 'https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/analytics.csv',\n        beforeParse: function (csv) {'{'}\n        return csv.replace(/\\n\\n/g, '\\n');\n        {'}'}\n        {'}'},\n        title: {'{'}\n        text: 'Daily sessions at www.highcharts.com',\n        align: 'left'\n        {'}'},\n        subtitle: {'{'}\n        text: 'Source: Google Analytics',\n        align: 'left'\n        {'}'},\n        xAxis: {'{'}\n        tickInterval: 7 * 24 * 3600 * 1000, // one week\n        tickWidth: 0,\n        gridLineWidth: 1,\n        labels: {'{'}\n        align: 'left',\n        x: 3,\n        y: -3\n        {'}'}\n        {'}'},\n        yAxis: [{'{'} // left y axis\n        title: {'{'}\n        text: null\n        {'}'},\n        labels: {'{'}\n        align: 'left',\n        x: 3,\n        y: 16,\n        format: '{'{'}value:.,0f{'}'}'\n        {'}'},\n        showFirstLabel: false\n        {'}'}, {'{'} // right y axis\n        linkedTo: 0,\n        gridLineWidth: 0,\n        opposite: true,\n        title: {'{'}\n        text: null\n        {'}'},\n        labels: {'{'}\n        align: 'right',\n        x: -3,\n        y: 16,\n        format: '{'{'}value:.,0f{'}'}'\n        {'}'},\n        showFirstLabel: false\n        {'}'}],\n        legend: {'{'}\n        align: 'left',\n        verticalAlign: 'top',\n        borderWidth: 0\n        {'}'},\n        tooltip: {'{'}\n        shared: true,\n        crosshairs: true\n        {'}'},\n        plotOptions: {'{'}\n        series: {'{'}\n        cursor: 'pointer',\n        className: 'popup-on-click',\n        marker: {'{'}\n        lineWidth: 1\n        {'}'}\n        {'}'}\n        {'}'},\n        series: [{'{'}\n        name: 'All sessions',\n        lineWidth: 4,\n        marker: {'{'}\n        radius: 4\n        {'}'}\n        {'}'}, {'{'}\n        name: 'New users'\n        {'}'}]\n        {'}'});\n      </div>\n    );\n  }\n});"],"mappings":";;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA,IAAIA,OAAO,GAAGC,KAAK,CAACC,WAAW,CAAC;EAAAC,WAAA;EAC9BC,MAAM,EAAE,SAAAA,CAAA,EAAW;IACjB,oBACEC,OAAA;MAAAC,QAAA,GAAK,6NAGwD,EAAC,GAAG,EAAC,sEACI,EAAC,GAAG,EAAC,8GAG3D,eAAAD,OAAA;QAAAC,QAAA,GAAG,GAAC,EAAC,GAAG,EAAC,MAAI,EAAC,GAAG;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAAAL,OAAA;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,KAAC,EAAC,GAAG,EAAC,QAAM,EAAC,GAAG,EAAC,IAAE,EAAC,GAAG,EAAC,kBAAgB,EAAC,GAAG,EAAC,qRAMpE,EAAC,GAAG,EAAC,uFAGlB,EAAC,GAAG,EAAC,2FAKX,EAAC,GAAG,EAAC,SACA,EAAC,GAAG,EAAC,gBAEV,EAAC,GAAG,EAAC,6BACoB,EAAC,GAAG,EAAC,wCAE9B,EAAC,GAAG,EAAC,WAEL,EAAC,GAAG,EAAC,QAAM,EAAC,GAAG,EAAC,qBAEV,EAAC,GAAG,EAAC,eAAa,EAAC,GAAG,EAAC,aACpB,EAAC,GAAG,EAAC,0BAAwB,EAAC,GAAG,EAAC,IAAE,EAAC,GAAG,EAAC,iBAAe,EAAC,GAAG,EAAC,IACtE,EAAC,GAAG,EACH,GAAG,EACH,GAAG,EAAC,mCACyB,EAAC,GAAG,EAAC,SAC5B,EAAC,GAAG,EAAC,sBACQ,EAAC,GAAG,EAAC,eAEzB,EAAC,GAAG,EACH,GAAG,EAAC,UACC,EAAC,GAAG,EAAC,6HAEiB,EAAC,GAAG,EAAC,uCAEjC,EAAC,GAAG,EACH,GAAG,EAAC,WACE,EAAC,GAAG,EAAC,6DAGZ,EAAC,GAAG,EAAC,cACK,EAAC,GAAG,EAAC,iDAGf,EAAC,GAAG,EAAC,WACE,EAAC,GAAG,EAAC,0FAIJ,EAAC,GAAG,EAAC,4BAIb,EAAC,GAAG,EACH,GAAG,EAAC,YACG,EAAC,GAAG,EAAC,yBACN,EAAC,GAAG,EAAC,YAEZ,EAAC,GAAG,EAAC,YACG,EAAC,GAAG,EAAC,uCAIJ,EAAC,GAAG,EAAC,YAAU,EAAC,GAAG,EAAC,GAC7B,EAAC,GAAG,EAAC,yBAEL,EAAC,GAAG,EAAC,IAAE,EAAC,GAAG,EAAC,yEAIL,EAAC,GAAG,EAAC,YAEZ,EAAC,GAAG,EAAC,YACG,EAAC,GAAG,EAAC,yCAIJ,EAAC,GAAG,EAAC,YAAU,EAAC,GAAG,EAAC,GAC7B,EAAC,GAAG,EAAC,yBAEL,EAAC,GAAG,EAAC,aACG,EAAC,GAAG,EAAC,qDAIb,EAAC,GAAG,EAAC,aACI,EAAC,GAAG,EAAC,gCAGd,EAAC,GAAG,EAAC,iBACQ,EAAC,GAAG,EAAC,UACV,EAAC,GAAG,EAAC,0DAGL,EAAC,GAAG,EAAC,cAEb,EAAC,GAAG,EACH,GAAG,EACH,GAAG,EAAC,aACI,EAAC,GAAG,EAAC,8CAGN,EAAC,GAAG,EAAC,WAEb,EAAC,GAAG,EACH,GAAG,EAAC,IAAE,EAAC,GAAG,EAAC,mBAEZ,EAAC,GAAG,EAAC,GACL,EAAC,GAAG,EAAC,IACP;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAEV;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}