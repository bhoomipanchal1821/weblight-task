{"ast":null,"code":"var _jsxFileName = \"/var/www/html/REACT/weblight-task/src/components/DropDownChart.js\",\n  _s = $RefreshSig$();\n// // import { useState } from \"react\";\n// // import HighchartsReact from \"highcharts-react-official\";\n// // import Highcharts from \"highcharts\";\n\n// // const Chart = ({ chartRef, setChartInfo }) => {\n// //   const [options] = useState({\n// //     plotOptions: {\n// //       series: {\n// //         point: {\n\n// //         }\n// //       }\n// //     },\n// //     series: [\n// //       {\n// //         data: [2, 7, 5, 1, 4]\n// //       },\n// //       {\n// //         data: [4, 3, 5, 6, 2, 3]\n// //       }\n// //     ]\n// //   });\n\n// //   return (\n// //     <HighchartsReact ref={chartRef} highcharts={Highcharts} options={options} />\n// //   );\n// // };\n\n// // export default Chart;\n// // Highchart.js\n\n// // import React from 'react';\n// // import { useSelector } from 'react-redux';\n// // import Highcharts from 'highcharts';\n// // import HighchartsReact from 'highcharts-react-official';\n\n// // const Highchart = () => {\n// //   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n\n// //   const chartOptions = {\n// //     // Highcharts configuration options\n// //     title: {\n// //       text: `Highchart for ${selectedOption?.label || 'No Option Selected'}`,\n// //     },\n// //     // ... other Highcharts options\n// //   };\n\n// //   return (\n// //     <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n// //   );\n// // };\n\n// // export default Highchart;\n// // CodeFrequencyChart.js\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n// import { fetchCodeFrequency } from './CodeFrequencyService';\n\n// const CodeFrequencyChart = ({ owner, repo }) => {\n//   const dispatch = useDispatch();\n//   const codeFrequencyData = useSelector((state) => state.codeFrequency.data);\n\n//   useEffect(() => {\n//     fetchCodeFrequency(owner, repo);\n//   }, [owner, repo]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: 'area',\n//     },\n//     title: {\n//       text: `Code Frequency for ${owner}/${repo}`,\n//     },\n//     xAxis: {\n//       categories: codeFrequencyData.map((week) => week[0]),\n//       title: {\n//         text: 'Weeks',\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Total Changes',\n//       },\n//     },\n//     series: [\n//       {\n//         name: 'Additions',\n//         data: codeFrequencyData.map((week) => week[1]),\n//       },\n//       {\n//         name: 'Deletions',\n//         data: codeFrequencyData.map((week) => week[2]),\n//       },\n//     ],\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n// };\n\n// export default CodeFrequencyChart;\n\n// DynamicHighchart.js\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { fetchChartData } from './UserService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicHighchart = () => {\n  _s();\n  const dispatch = useDispatch();\n  const selectedOption = useSelector(state => state.dropdown.selectedOption);\n  const chartData = useSelector(state => state.chartData.data); // Use your actual chart data reducer\n\n  useEffect(() => {\n    if (selectedOption) {\n      fetchChartData(selectedOption.value).then(data => {\n        // Dispatch an action to update the chart data in the Redux store\n        // Replace 'updateChartData' with the actual action from your chart reducer\n        dispatch(updateChartData(data));\n      }).catch(error => {\n        console.error('Error fetching chart data:', error);\n      });\n    }\n  }, [dispatch, selectedOption]);\n  const chartOptions = {\n    // Highcharts configuration options\n    title: {\n      text: `Dynamic Highchart for ${(selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.label) || 'No Option Selected'}`\n    }\n    // ... other Highcharts options\n  };\n  return /*#__PURE__*/_jsxDEV(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(DynamicHighchart, \"hpeArCTeaKtDGayVMnKxch1NXX0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = DynamicHighchart;\nexport default DynamicHighchart;\nvar _c;\n$RefreshReg$(_c, \"DynamicHighchart\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Highcharts","HighchartsReact","fetchChartData","jsxDEV","_jsxDEV","DynamicHighchart","_s","dispatch","selectedOption","state","dropdown","chartData","data","value","then","updateChartData","catch","error","console","chartOptions","title","text","label","highcharts","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/var/www/html/REACT/weblight-task/src/components/DropDownChart.js"],"sourcesContent":["// // import { useState } from \"react\";\n// // import HighchartsReact from \"highcharts-react-official\";\n// // import Highcharts from \"highcharts\";\n\n// // const Chart = ({ chartRef, setChartInfo }) => {\n// //   const [options] = useState({\n// //     plotOptions: {\n// //       series: {\n// //         point: {\n          \n// //         }\n// //       }\n// //     },\n// //     series: [\n// //       {\n// //         data: [2, 7, 5, 1, 4]\n// //       },\n// //       {\n// //         data: [4, 3, 5, 6, 2, 3]\n// //       }\n// //     ]\n// //   });\n\n// //   return (\n// //     <HighchartsReact ref={chartRef} highcharts={Highcharts} options={options} />\n// //   );\n// // };\n\n// // export default Chart;\n// // Highchart.js\n\n// // import React from 'react';\n// // import { useSelector } from 'react-redux';\n// // import Highcharts from 'highcharts';\n// // import HighchartsReact from 'highcharts-react-official';\n\n// // const Highchart = () => {\n// //   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n\n// //   const chartOptions = {\n// //     // Highcharts configuration options\n// //     title: {\n// //       text: `Highchart for ${selectedOption?.label || 'No Option Selected'}`,\n// //     },\n// //     // ... other Highcharts options\n// //   };\n\n// //   return (\n// //     <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n// //   );\n// // };\n\n// // export default Highchart;\n// // CodeFrequencyChart.js\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n// import { fetchCodeFrequency } from './CodeFrequencyService';\n\n// const CodeFrequencyChart = ({ owner, repo }) => {\n//   const dispatch = useDispatch();\n//   const codeFrequencyData = useSelector((state) => state.codeFrequency.data);\n\n//   useEffect(() => {\n//     fetchCodeFrequency(owner, repo);\n//   }, [owner, repo]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: 'area',\n//     },\n//     title: {\n//       text: `Code Frequency for ${owner}/${repo}`,\n//     },\n//     xAxis: {\n//       categories: codeFrequencyData.map((week) => week[0]),\n//       title: {\n//         text: 'Weeks',\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Total Changes',\n//       },\n//     },\n//     series: [\n//       {\n//         name: 'Additions',\n//         data: codeFrequencyData.map((week) => week[1]),\n//       },\n//       {\n//         name: 'Deletions',\n//         data: codeFrequencyData.map((week) => week[2]),\n//       },\n//     ],\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n// };\n\n// export default CodeFrequencyChart;\n\n\n// DynamicHighchart.js\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { fetchChartData } from './UserService';\n\nconst DynamicHighchart = () => {\n  const dispatch = useDispatch();\n  const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n  const chartData = useSelector((state) => state.chartData.data); // Use your actual chart data reducer\n\n  useEffect(() => {\n    if (selectedOption) {\n      fetchChartData(selectedOption.value)\n        .then((data) => {\n          // Dispatch an action to update the chart data in the Redux store\n          // Replace 'updateChartData' with the actual action from your chart reducer\n          dispatch(updateChartData(data));\n        })\n        .catch((error) => {\n          console.error('Error fetching chart data:', error);\n        });\n    }\n  }, [dispatch, selectedOption]);\n\n  const chartOptions = {\n    // Highcharts configuration options\n    title: {\n      text: `Dynamic Highchart for ${selectedOption?.label || 'No Option Selected'}`,\n    },\n    // ... other Highcharts options\n  };\n\n  return (\n    <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n  );\n};\n\nexport default DynamicHighchart;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,eAAe,MAAM,2BAA2B;AACvD,SAASC,cAAc,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,cAAc,GAAGT,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAACF,cAAc,CAAC;EAC5E,MAAMG,SAAS,GAAGZ,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACE,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;;EAEhEf,SAAS,CAAC,MAAM;IACd,IAAIW,cAAc,EAAE;MAClBN,cAAc,CAACM,cAAc,CAACK,KAAK,CAAC,CACjCC,IAAI,CAAEF,IAAI,IAAK;QACd;QACA;QACAL,QAAQ,CAACQ,eAAe,CAACH,IAAI,CAAC,CAAC;MACjC,CAAC,CAAC,CACDI,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACV,QAAQ,EAAEC,cAAc,CAAC,CAAC;EAE9B,MAAMW,YAAY,GAAG;IACnB;IACAC,KAAK,EAAE;MACLC,IAAI,EAAG,yBAAwB,CAAAb,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEc,KAAK,KAAI,oBAAqB;IAC/E;IACA;EACF,CAAC;EAED,oBACElB,OAAA,CAACH,eAAe;IAACsB,UAAU,EAAEvB,UAAW;IAACwB,OAAO,EAAEL;EAAa;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEtE,CAAC;AAACtB,EAAA,CA9BID,gBAAgB;EAAA,QACHP,WAAW,EACLC,WAAW,EAChBA,WAAW;AAAA;AAAA8B,EAAA,GAHzBxB,gBAAgB;AAgCtB,eAAeA,gBAAgB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}