{"ast":null,"code":"var _jsxFileName = \"/var/www/html/REACT/weblight-task/src/components/DropDownChart.js\",\n  _s = $RefreshSig$();\n// // DynamicHighchart.js\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n\n// import { setChartData } from '../redux/chartdataSlice';\n// import fetchChartData from '../redux/userSlice'\n// const DynamicHighchart = () => {\n//     // Sample chart data structure\n// const chartData = [\n//     { category: 'Week 1', value1: 10, value2: 20 },\n//     { category: 'Week 2', value1: 15, value2: 25 },\n//     // ... more data\n//   ];\n\n//   const dispatch = useDispatch();\n//   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n\n//   useEffect(() => {\n//     if (selectedOption) {\n//       fetchChartData(selectedOption.value)\n//         .then((data) => {\n//           dispatch(setChartData(data)); // Dispatch the actual action to update chart data\n//         })\n//         .catch((error) => {\n//           console.error('Error fetching chart data:', error);\n//         });\n//     }\n//   }, [dispatch, selectedOption]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: 'line', // Specify the chart type (line, column, bar, etc.)\n//     },\n//     title: {\n//       text: `Dynamic Highchart for ${selectedOption?.label || 'No Option Selected'}`,\n//     },\n//     xAxis: {\n//       categories: chartData.map((item) => item.category), // Replace with your actual data property\n//       title: {\n//         text: 'X-Axis Label',\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Y-Axis Label',\n//       },\n//     },\n//     series: [\n//       {\n//         name: 'Series 1',\n//         data: chartData.map((item) => item.value1), // Replace with your actual data property\n//       },\n//       {\n//         name: 'Series 2',\n//         data: chartData.map((item) => item.value2), // Replace with your actual data property\n//       },\n//     ],\n//     // Add more configuration options as needed\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n// };\n\n// export default DynamicHighchart;\n\n// DynamicHighchart.js\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { fetchChartData } from './chartDataThunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicHighchart = ({\n  owner,\n  repo\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const chartData = useSelector(state => state.chartData.data);\n  useEffect(() => {\n    dispatch(fetchChartData(owner, repo));\n  }, [dispatch, owner, repo]);\n  const chartOptions = {\n    // Highcharts configuration options\n    title: {\n      text: `Dynamic Highchart for ${owner}/${repo}`\n    }\n    // ... other Highcharts options\n  };\n  return /*#__PURE__*/_jsxDEV(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 10\n  }, this);\n};\n_s(DynamicHighchart, \"YzOXAM0DtQnrL3bW4GxwUvfrd1A=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = DynamicHighchart;\nexport default DynamicHighchart;\nvar _c;\n$RefreshReg$(_c, \"DynamicHighchart\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Highcharts","HighchartsReact","fetchChartData","jsxDEV","_jsxDEV","DynamicHighchart","owner","repo","_s","dispatch","chartData","state","data","chartOptions","title","text","highcharts","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/var/www/html/REACT/weblight-task/src/components/DropDownChart.js"],"sourcesContent":["\n// // DynamicHighchart.js\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Highcharts from 'highcharts';\n// import HighchartsReact from 'highcharts-react-official';\n\n// import { setChartData } from '../redux/chartdataSlice';\n// import fetchChartData from '../redux/userSlice'\n// const DynamicHighchart = () => {\n//     // Sample chart data structure\n// const chartData = [\n//     { category: 'Week 1', value1: 10, value2: 20 },\n//     { category: 'Week 2', value1: 15, value2: 25 },\n//     // ... more data\n//   ];\n  \n//   const dispatch = useDispatch();\n//   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n \n\n//   useEffect(() => {\n//     if (selectedOption) {\n//       fetchChartData(selectedOption.value)\n//         .then((data) => {\n//           dispatch(setChartData(data)); // Dispatch the actual action to update chart data\n//         })\n//         .catch((error) => {\n//           console.error('Error fetching chart data:', error);\n//         });\n//     }\n//   }, [dispatch, selectedOption]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: 'line', // Specify the chart type (line, column, bar, etc.)\n//     },\n//     title: {\n//       text: `Dynamic Highchart for ${selectedOption?.label || 'No Option Selected'}`,\n//     },\n//     xAxis: {\n//       categories: chartData.map((item) => item.category), // Replace with your actual data property\n//       title: {\n//         text: 'X-Axis Label',\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Y-Axis Label',\n//       },\n//     },\n//     series: [\n//       {\n//         name: 'Series 1',\n//         data: chartData.map((item) => item.value1), // Replace with your actual data property\n//       },\n//       {\n//         name: 'Series 2',\n//         data: chartData.map((item) => item.value2), // Replace with your actual data property\n//       },\n//     ],\n//     // Add more configuration options as needed\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n// };\n\n// export default DynamicHighchart;\n\n\n// DynamicHighchart.js\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { fetchChartData } from './chartDataThunks';\n\nconst DynamicHighchart = ({ owner, repo }) => {\n  const dispatch = useDispatch();\n  const chartData = useSelector((state) => state.chartData.data);\n\n  useEffect(() => {\n    dispatch(fetchChartData(owner, repo));\n  }, [dispatch, owner, repo]);\n\n  const chartOptions = {\n    // Highcharts configuration options\n    title: {\n      text: `Dynamic Highchart for ${owner}/${repo}`,\n    },\n    // ... other Highcharts options\n  };\n\n  return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n};\n\nexport default DynamicHighchart;\n"],"mappings":";;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,eAAe,MAAM,2BAA2B;AACvD,SAASC,cAAc,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,SAAS,GAAGX,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACD,SAAS,CAACE,IAAI,CAAC;EAE9Df,SAAS,CAAC,MAAM;IACdY,QAAQ,CAACP,cAAc,CAACI,KAAK,EAAEC,IAAI,CAAC,CAAC;EACvC,CAAC,EAAE,CAACE,QAAQ,EAAEH,KAAK,EAAEC,IAAI,CAAC,CAAC;EAE3B,MAAMM,YAAY,GAAG;IACnB;IACAC,KAAK,EAAE;MACLC,IAAI,EAAG,yBAAwBT,KAAM,IAAGC,IAAK;IAC/C;IACA;EACF,CAAC;EAED,oBAAOH,OAAA,CAACH,eAAe;IAACe,UAAU,EAAEhB,UAAW;IAACiB,OAAO,EAAEJ;EAAa;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3E,CAAC;AAACb,EAAA,CAjBIH,gBAAgB;EAAA,QACHP,WAAW,EACVC,WAAW;AAAA;AAAAuB,EAAA,GAFzBjB,gBAAgB;AAmBtB,eAAeA,gBAAgB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}