{"ast":null,"code":"var _jsxFileName = \"/var/www/html/REACT/weblight-task/src/components/DropDownChart.js\",\n  _s = $RefreshSig$();\n// // DynamicHighchart.js\n\n// import React, { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import fetchChartData from \"../redux/chartdataSlice\";\n// import { setChartData } from \"../redux/chartdataSlice\";\n\n// const DynamicHighchart = () => {\n//   // Sample chart data structure\n//   const chartData = [\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 20, value2: 20 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 50, value2: 30 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 30, value2: 75 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 90, value2: 75 },\n\n//     // ... more data\n//   ];\n\n//   const dispatch = useDispatch();\n//   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n\n//   useEffect(() => {\n//     if (selectedOption) {\n//       fetchChartData(selectedOption.value)\n//         .then((data) => {\n//           dispatch(setChartData(data)); // Dispatch the actual action to update chart data\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching chart data:\", error);\n//         });\n//     }\n//   }, [dispatch, selectedOption]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: \"line\", // Specify the chart type (line, column, bar, etc.)\n//     },\n//     title: {\n//       text: \"Total Changes\" \n//     },\n//     xAxis: {\n//       categories: chartData.map((item) => item.category), // Replace with your actual data property\n//       title: {\n//         text: \"X-Axis Label\",\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: \"Y-Axis Label\",\n//       },\n//     },\n//     series: [\n//       {\n//         name: \"Series 1\",\n//         data: chartData.map((item) => item.value1), // Replace with your actual data property\n//       },\n\n//     ],\n//     // Add more configuration options as needed\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n\n// };\n\n// export default DynamicHighchart;\n\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RepoGraphs = ({\n  owner,\n  repo\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [additions, setAdditions] = useState(false);\n  const [deletions, setDeletions] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      const params = new URLSearchParams({\n        owner,\n        repo,\n        additions: additions ? 'true' : 'false',\n        deletions: deletions ? 'true' : 'false'\n      });\n      const response = await fetch(`/api/repo-stats?${params}`);\n      const result = await response.json();\n      setData(result);\n    };\n    fetchData();\n  }, [owner, repo, additions, deletions]);\n  /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 500,\n    height: 300,\n    data: data,\n    margin: {\n      top: 5,\n      right: 20,\n      bottom: 5,\n      left: 0\n    },\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"total\",\n      stroke: \"#8884d8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n      stroke: \"#ccc\",\n      strokeDasharray: \"5 5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"week\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 2\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 1\n  }, this);\n};\n_s(RepoGraphs, \"zkzZRqTWlkj30jvbzVZlisPAK90=\");\n_c = RepoGraphs;\nexport default RepoGraphs;\nvar _c;\n$RefreshReg$(_c, \"RepoGraphs\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","RepoGraphs","owner","repo","_s","data","setData","additions","setAdditions","deletions","setDeletions","fetchData","params","URLSearchParams","response","fetch","result","json","width","height","margin","top","right","bottom","left","children","type","dataKey","stroke","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","_c","$RefreshReg$"],"sources":["/var/www/html/REACT/weblight-task/src/components/DropDownChart.js"],"sourcesContent":["// // DynamicHighchart.js\n\n// import React, { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import fetchChartData from \"../redux/chartdataSlice\";\n// import { setChartData } from \"../redux/chartdataSlice\";\n\n// const DynamicHighchart = () => {\n//   // Sample chart data structure\n//   const chartData = [\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 20, value2: 20 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 50, value2: 30 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 30, value2: 75 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 90, value2: 75 },\n   \n//     // ... more data\n//   ];\n\n//   const dispatch = useDispatch();\n//   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n\n//   useEffect(() => {\n//     if (selectedOption) {\n//       fetchChartData(selectedOption.value)\n//         .then((data) => {\n//           dispatch(setChartData(data)); // Dispatch the actual action to update chart data\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching chart data:\", error);\n//         });\n//     }\n//   }, [dispatch, selectedOption]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: \"line\", // Specify the chart type (line, column, bar, etc.)\n//     },\n//     title: {\n//       text: \"Total Changes\" \n//     },\n//     xAxis: {\n//       categories: chartData.map((item) => item.category), // Replace with your actual data property\n//       title: {\n//         text: \"X-Axis Label\",\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: \"Y-Axis Label\",\n//       },\n//     },\n//     series: [\n//       {\n//         name: \"Series 1\",\n//         data: chartData.map((item) => item.value1), // Replace with your actual data property\n//       },\n      \n//     ],\n//     // Add more configuration options as needed\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n  \n// };\n\n// export default DynamicHighchart;\n\n\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\nconst RepoGraphs = ({ owner, repo }) => {\n const [data, setData] = useState([]);\n const [additions, setAdditions] = useState(false);\n const [deletions, setDeletions] = useState(false);\n\n useEffect(() => {\n    const fetchData = async () => {\n      const params = new URLSearchParams({\n        owner,\n        repo,\n        additions: additions ? 'true' : 'false',\n        deletions: deletions ? 'true' : 'false',\n      });\n\n      const response = await fetch(`/api/repo-stats?${params}`);\n      const result = await response.json();\n      setData(result);\n    };\n\n    fetchData();\n }, [owner, repo, additions, deletions]);\n\n<LineChart width={500} height={300} data={data} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\n <Line type=\"monotone\" dataKey=\"total\" stroke=\"#8884d8\" />\n <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n <XAxis dataKey=\"week\" />\n <YAxis />\n <Tooltip />\n <Legend />\n</LineChart>\n};\n\nexport default RepoGraphs;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}