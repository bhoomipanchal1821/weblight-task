{"ast":null,"code":"var _jsxFileName = \"/var/www/html/REACT/weblight-task/src/components/DropDownChart.js\",\n  _s = $RefreshSig$();\n// // DynamicHighchart.js\n\n// import React, { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import fetchChartData from \"../redux/chartdataSlice\";\n// import { setChartData } from \"../redux/chartdataSlice\";\n\n// const DynamicHighchart = () => {\n//   // Sample chart data structure\n//   const chartData = [\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 20, value2: 20 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 50, value2: 30 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 30, value2: 75 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 90, value2: 75 },\n\n//     // ... more data\n//   ];\n\n//   const dispatch = useDispatch();\n//   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n\n//   useEffect(() => {\n//     if (selectedOption) {\n//       fetchChartData(selectedOption.value)\n//         .then((data) => {\n//           dispatch(setChartData(data)); // Dispatch the actual action to update chart data\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching chart data:\", error);\n//         });\n//     }\n//   }, [dispatch, selectedOption]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: \"line\", // Specify the chart type (line, column, bar, etc.)\n//     },\n//     title: {\n//       text: \"Total Changes\" \n//     },\n//     xAxis: {\n//       categories: chartData.map((item) => item.category), // Replace with your actual data property\n//       title: {\n//         text: \"X-Axis Label\",\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: \"Y-Axis Label\",\n//       },\n//     },\n//     series: [\n//       {\n//         name: \"Series 1\",\n//         data: chartData.map((item) => item.value1), // Replace with your actual data property\n//       },\n\n//     ],\n//     // Add more configuration options as needed\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n\n// };\n\n// export default DynamicHighchart;\n\n// CommitChart.js\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { fetchCommitData } from './commitdataThunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommitChart = ({\n  owner,\n  repo\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const commitData = useSelector(state => state.commitData.data);\n  const [selectedOption, setSelectedOption] = useState('totalChanges'); // Default to total changes\n\n  useEffect(() => {\n    dispatch(fetchCommitData(owner, repo));\n  }, [dispatch, owner, repo]);\n  const getSeries = () => {\n    const contributors = Array.from(new Set(commitData.map(commit => commit.author)));\n    return contributors.map(contributor => {\n      const contributorCommits = commitData.filter(commit => commit.author === contributor);\n      const weeklyChanges = contributorCommits.map(commit => commit[selectedOption]);\n      return {\n        name: contributor,\n        data: weeklyChanges\n      };\n    });\n  };\n  const chartOptions = {\n    chart: {\n      type: 'line'\n    },\n    title: {\n      text: 'Contributors\\' Weekly Changes'\n    },\n    xAxis: {\n      // Your X-axis configuration\n      // For human-readable week start dates, you may need to format your dates accordingly\n    },\n    yAxis: {\n      title: {\n        text: 'Total Changes'\n      }\n    },\n    tooltip: {\n      // Tooltip configuration\n      formatter: function () {\n        return `${this.series.name}<br/>Week: ${this.x}<br/>Changes: ${this.y}`;\n      }\n    },\n    legend: {\n      // Legend configuration\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'middle'\n    },\n    series: getSeries()\n  };\n  const handleDropdownChange = option => {\n    setSelectedOption(option);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => handleDropdownChange(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"additions\",\n        children: \"Additions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"deletions\",\n        children: \"Deletions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"totalChanges\",\n        children: \"Total Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(CommitChart, \"yeuAPWiaPvfumwVZFYHhNBO7Rnw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = CommitChart;\nexport default CommitChart;\nvar _c;\n$RefreshReg$(_c, \"CommitChart\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","Highcharts","HighchartsReact","fetchCommitData","jsxDEV","_jsxDEV","CommitChart","owner","repo","_s","dispatch","commitData","state","data","selectedOption","setSelectedOption","getSeries","contributors","Array","from","Set","map","commit","author","contributor","contributorCommits","filter","weeklyChanges","name","chartOptions","chart","type","title","text","xAxis","yAxis","tooltip","formatter","series","x","y","legend","layout","align","verticalAlign","handleDropdownChange","option","children","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","highcharts","options","_c","$RefreshReg$"],"sources":["/var/www/html/REACT/weblight-task/src/components/DropDownChart.js"],"sourcesContent":["// // DynamicHighchart.js\n\n// import React, { useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import fetchChartData from \"../redux/chartdataSlice\";\n// import { setChartData } from \"../redux/chartdataSlice\";\n\n// const DynamicHighchart = () => {\n//   // Sample chart data structure\n//   const chartData = [\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 20, value2: 20 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 50, value2: 30 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 30, value2: 75 },\n//     { category: \"Week<br/>Changes<br/>Contributer\", value1: 90, value2: 75 },\n   \n//     // ... more data\n//   ];\n\n//   const dispatch = useDispatch();\n//   const selectedOption = useSelector((state) => state.dropdown.selectedOption);\n\n//   useEffect(() => {\n//     if (selectedOption) {\n//       fetchChartData(selectedOption.value)\n//         .then((data) => {\n//           dispatch(setChartData(data)); // Dispatch the actual action to update chart data\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching chart data:\", error);\n//         });\n//     }\n//   }, [dispatch, selectedOption]);\n\n//   const chartOptions = {\n//     chart: {\n//       type: \"line\", // Specify the chart type (line, column, bar, etc.)\n//     },\n//     title: {\n//       text: \"Total Changes\" \n//     },\n//     xAxis: {\n//       categories: chartData.map((item) => item.category), // Replace with your actual data property\n//       title: {\n//         text: \"X-Axis Label\",\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: \"Y-Axis Label\",\n//       },\n//     },\n//     series: [\n//       {\n//         name: \"Series 1\",\n//         data: chartData.map((item) => item.value1), // Replace with your actual data property\n//       },\n      \n//     ],\n//     // Add more configuration options as needed\n//   };\n\n//   return <HighchartsReact highcharts={Highcharts} options={chartOptions} />;\n  \n// };\n\n// export default DynamicHighchart;\n\n\n\n// CommitChart.js\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { fetchCommitData } from './commitdataThunks';\n\nconst CommitChart = ({ owner, repo }) => {\n  const dispatch = useDispatch();\n  const commitData = useSelector((state) => state.commitData.data);\n  const [selectedOption, setSelectedOption] = useState('totalChanges'); // Default to total changes\n\n  useEffect(() => {\n    dispatch(fetchCommitData(owner, repo));\n  }, [dispatch, owner, repo]);\n\n  const getSeries = () => {\n    const contributors = Array.from(new Set(commitData.map((commit) => commit.author)));\n    return contributors.map((contributor) => {\n      const contributorCommits = commitData.filter((commit) => commit.author === contributor);\n      const weeklyChanges = contributorCommits.map((commit) => commit[selectedOption]);\n      return {\n        name: contributor,\n        data: weeklyChanges,\n      };\n    });\n  };\n\n  const chartOptions = {\n    chart: {\n      type: 'line',\n    },\n    title: {\n      text: 'Contributors\\' Weekly Changes',\n    },\n    xAxis: {\n      // Your X-axis configuration\n      // For human-readable week start dates, you may need to format your dates accordingly\n    },\n    yAxis: {\n      title: {\n        text: 'Total Changes',\n      },\n    },\n    tooltip: {\n      // Tooltip configuration\n      formatter: function () {\n        return `${this.series.name}<br/>Week: ${this.x}<br/>Changes: ${this.y}`;\n      },\n    },\n    legend: {\n      // Legend configuration\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'middle',\n    },\n    series: getSeries(),\n  };\n\n  const handleDropdownChange = (option) => {\n    setSelectedOption(option);\n  };\n\n  return (\n    <div>\n      {/* Dropdown for selecting additions, deletions, or total changes */}\n      <select onChange={(e) => handleDropdownChange(e.target.value)}>\n        <option value=\"additions\">Additions</option>\n        <option value=\"deletions\">Deletions</option>\n        <option value=\"totalChanges\">Total Changes</option>\n      </select>\n\n      {/* Highcharts component for the multiline plot */}\n      <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n    </div>\n  );\n};\n\nexport default CommitChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}