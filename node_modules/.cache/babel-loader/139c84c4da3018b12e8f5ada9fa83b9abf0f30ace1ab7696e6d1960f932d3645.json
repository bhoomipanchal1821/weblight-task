{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst GITHUB_API_URL = 'https://api.github.com/search/repositories?q=created:%3E2017-10-22&sort=stars&order=desc';\nexport const fetchRepositories = createAsyncThunk('repositories/fetchRepositories', async params => {\n  const url = new URL(GITHUB_API_URL);\n  url.search = new URLSearchParams(params).toString();\n  const response = await fetch(url);\n  const data = await response.json();\n  return data.items;\n});\nconst repositoriesSlice = createSlice({\n  name: 'repositories',\n  initialState: {\n    data: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchRepositories.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchRepositories.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload;\n    }).addCase(fetchRepositories.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default repositoriesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","GITHUB_API_URL","fetchRepositories","params","url","URL","search","URLSearchParams","toString","response","fetch","data","json","items","repositoriesSlice","name","initialState","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/var/www/html/REACT/weblight-task/src/redux/repositoriesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst GITHUB_API_URL = 'https://api.github.com/search/repositories?q=created:%3E2017-10-22&sort=stars&order=desc';\n\nexport const fetchRepositories = createAsyncThunk('repositories/fetchRepositories', async (params) => {\n  const url = new URL(GITHUB_API_URL);\n  url.search = new URLSearchParams(params).toString();\n\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data.items;\n});\n\nconst repositoriesSlice = createSlice({\n  name: 'repositories',\n  initialState: { data: [], status: 'idle', error: null },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchRepositories.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchRepositories.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.data = action.payload;\n      })\n      .addCase(fetchRepositories.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default repositoriesSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,cAAc,GAAG,0FAA0F;AAEjH,OAAO,MAAMC,iBAAiB,GAAGF,gBAAgB,CAAC,gCAAgC,EAAE,MAAOG,MAAM,IAAK;EACpG,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACJ,cAAc,CAAC;EACnCG,GAAG,CAACE,MAAM,GAAG,IAAIC,eAAe,CAACJ,MAAM,CAAC,CAACK,QAAQ,CAAC,CAAC;EAEnD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,CAAC;EACjC,MAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAElC,OAAOD,IAAI,CAACE,KAAK;AACnB,CAAC,CAAC;AAEF,MAAMC,iBAAiB,GAAGf,WAAW,CAAC;EACpCgB,IAAI,EAAE,cAAc;EACpBC,YAAY,EAAE;IAAEL,IAAI,EAAE,EAAE;IAAEM,MAAM,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAK,CAAC;EACvDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACpB,iBAAiB,CAACqB,OAAO,EAAGC,KAAK,IAAK;MAC7CA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACpB,iBAAiB,CAACuB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACvDF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACb,IAAI,GAAGe,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDL,OAAO,CAACpB,iBAAiB,CAAC0B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAef,iBAAiB,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}